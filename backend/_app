import sqlite3
import datetime
import jwt
from functools import wraps
from flask import Flask, request, jsonify, abort, make_response, redirect, url_for, send_from_directory
import requests
from config import service_token, secure_key, app_id, website_address, JWT_SECRET, admins
import json

app = Flask(__name__)

DATABASE = './queue.db'
PUBLIC_DIR = '../frontend'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS queue (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            timestamp TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            role INTEGER NOT NULL DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_to_queue(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO queue (user_id) VALUES (?)', (user_id,))
        conn.commit()
        lastrowid = cursor.lastrowid
        conn.close()
        return lastrowid
    except sqlite3.Error as e:
        conn.rollback()
        conn.close()
        return None

def get_queue():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM queue ORDER BY timestamp ASC')
    entries = cursor.fetchall()
    conn.close()
    return entries

def remove_from_queue(queue_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('DELETE FROM queue WHERE id = ?', (queue_id,))
        conn.commit()
        conn.close()
        return True
    except sqlite3.Error as e:
        conn.rollback()
        conn.close()
        return False

def auth_check(token):
    response = requests.get(
        f'https://api.vk.com/method/secure.checkToken?token={token}&client_secret={secure_key}&access_token={service_token}&v=5.126'
    )
    try:
        json_response = response.json()
        if json_response.get('response'):
            return {'valid': True, 'user_id': json_response['response']['user_id']}
        else:
            return {'valid': False, 'error': json_response.get('error', 'Auth failed')}
    except requests.exceptions.RequestException as e:
        return {'valid': False, 'error': f'Network error: {e}'}
    except json.JSONDecodeError as e:
        return {'valid': False, 'error': f'JSON decoding error: {e}'}

def use_guard(f):
    @wraps(f)
    def decorated_function(*args, **kws):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': 'Authorization token required'}), 401
        token = token.replace('Bearer ', '')
        auth_result = auth_check(token)
        if not auth_result['valid']:
            return jsonify({'error': auth_result['error']}), 401
        return f(auth_result['user_id'], *args, **kws)
    return decorated_function

def get_user_role(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0  # 0 - default role if user not found

def answer_template(data=None, error=None, meta=None, code=200):
    answer = {'data': data, 'error': error, 'meta': meta}
    return jsonify(answer), code

@app.route('/api/queue', methods=['POST'])
@use_guard
def add_to_queue_api(user_id):
    queue_id = add_to_queue(user_id)
    if queue_id:
        return answer_template(data={'queue_id': queue_id})
    else:
        return answer_template(error='Failed to add to queue', code=500)

@app.route('/api/queue', methods=['GET'])
def get_queue_api():
    queue = get_queue()
    return answer_template(data=queue)

@app.route('/api/queue/<int:queue_id>', methods=['DELETE'])
@use_guard
def remove_from_queue_api(user_id, queue_id):
    role = get_user_role(user_id)
    if role != 1: # Только администраторы могут удалять
        return answer_template(error="Unauthorized", code=403)
    if remove_from_queue(queue_id):
        return answer_template(data={'message': 'Removed from queue'})
    else:
        return answer_template(error='Failed to remove from queue', code=500)

@app.route('/api/code', methods=['GET'])
def register():
    code = request.args.get('code')
    if code:
        response = requests.get(
            f'https://oauth.vk.com/access_token?client_id={app_id}&client_secret={secure_key}&redirect_uri={website_address}&code={code}&v=5.126'
        )
        try:
            data = response.json()
            if data.get('access_token'):
                token = data['access_token']
                user_data = requests.get(
                    f"https://api.vk.com/method/users.get?access_token={token}&fields=photo_100&v=5.126"
                ).json()
                user_id = user_data['response'][0]['id']
                jwt_token = jwt.encode({'user_id': user_id}, JWT_SECRET, algorithm='HS256')
                resp = make_response(redirect(url_for('index_page')))
                resp.set_cookie('token', jwt_token)
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT OR IGNORE INTO users (id, role) VALUES (?, ?)", (user_id, 0)) # IGNORE - для предотвращения повторной записи.
                if user_id in admins:
                    cursor.execute("UPDATE users SET role = 1 WHERE id = ?", (user_id,))
                conn.commit()
                conn.close()
                return resp
            return answer_template(error='Invalid code', code=400)
        except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
            return answer_template(error=f'Error during registration: {e}', code=500)

    return answer_template(error='Code not provided', code=400)

@app.route('/api/authcheck', methods=['GET'])
@use_guard
def auth_check_api(user_id):
    return answer_template(data={'auth': True})

@app.route('/login')
def login():
    return redirect(
        f"https://oauth.vk.com/authorize?client_id={app_id}&display=page&redirect_uri={website_address}&scope=offline&response_type=code&v=5.126",
        code=302
    )

@app.route('/', methods=['GET'])
def index_page():
    return send_from_directory(PUBLIC_DIR, 'index.html')

@app.route('/<path:path>')
def local_storage(path):
    return send_from_directory(PUBLIC_DIR, path)

init_db() # Initialize the database
if __name__ == '__main__':
    app.run(debug=True)